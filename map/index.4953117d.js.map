{"mappings":"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","sources":["src/map/main.js"],"sourcesContent":["\nvar reader = new FileReader();\nreader.onload = function (event) {\n    var bytes = event.target.result;\n    mapLoaded(bytes)\n};\n\nvar file = document.getElementById('file');\nfile.onchange = function (event) {\n    if (file.files.length > 0) {\n        document.getElementById('symbol').innerHTML = 'Loading map...'\n        reader.readAsText(file.files[0]);\n    }\n};\n\n\nfunction mapLoaded(data) {\n    let lines = data.split('\\n');\n\n    let index = 0\n    let line = lines[index]\n    while (!line.startsWith('rom')) {\n        index += 1\n        line = lines[index]\n    }\n    index += 1\n    line = lines[index]\n    while (!line.startsWith('rom')) {\n        index += 1\n        line = lines[index]\n    }\n    console.log(line)\n    index += 1\n    line = lines[index]\n    // Parse declarations\n    let current_file = 'UNKNOWN'\n\n    symbols = []\n    while (index < lines.length) {\n        if (line.includes('debug_aranges')) {\n            // Break at the start of potentiall debug info if built with -g\n            break;\n        } else if (line.startsWith(' .')) {\n            // ignore this definition of filename\n        } else if(line.startsWith('  ')) {\n            let arr = line.split(/\\W+/)\n            //console.log(arr)\n            if (arr.length == 3 && arr[2] != '') { // it is actually a symbol\n                //console.log(parseInt(arr[1],16), arr[2])\n                let addr = parseInt(arr[1], 16)\n                if (symbols.length > 0) {\n                    symbols[symbols.length-1].size = addr - symbols[symbols.length-1].addr\n                }\n                symbols.push(\n                    {\n                        addr: addr,\n                        name: arr[2],\n                        file: current_file,\n                        size: 0\n                    }\n                )\n            }\n        } else if (!line.startsWith(' *')) {\n            // this defines the name\n            current_file = line.split('(')[0].trim()\n            //console.log(current_file)\n        }\n        index += 1\n        line = lines[index]\n    }\n    console.log(symbols)\n\n    redrawCanvas();\n\n}\n\nlet offset = 0x8000000\nlet symbols = []\n\nlet canvasWidth = 1024, canvasHeight = 1024;\nlet mode = 0;\n\nfunction redrawCanvas() {\n    hoverOverSymbols = false\n    document.getElementById('symbol').innerHTML = 'Painting map...'\n    setTimeout(() => {\n        drawCanvas();\n    }, 10);\n}\n\nlet typeRegexes = {\n    'data/sounds.o': 24,\n    'data/voicegroups.o': 24,\n    'data/strings.o': 8,\n    'data/scripts.o': 5,\n    '^data/animations/.*': 15,\n    '^data/const/.*': 14,\n\n    '^asm/.*': 13,\n    '^data/.*': 16,\n    '^src/.*': 3,\n}\n\nlet  colors = [\n    '#daf5b1',\n    '#a4ed8b',\n    '#6ce67f',\n    '#3fcc94',\n    '#2bada2',\n    '#22768f',\n    '#183c7a',\n    '#291e58',\n    '#3b0137',\n    '#660653',\n    '#940f5a',\n    '#a6174c',\n    '#cc293f',\n    '#eb3636',\n    '#eb6746',\n    '#f5a762',\n    '#fcd87e',\n    '#fffa9e',\n    '#fffbc7',\n    '#fcfffd',\n    '#d6fcff',\n    '#b7d9f7',\n    '#95a4f0',\n    '#8775eb',\n    '#7e4ae0',\n]\n\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n    } : null;\n}\n\nfor (let i = 0; i < colors.length; i++) {\n    colors[i] = hexToRgb(colors[i])\n}\n\nfunction drawPalette() {\n    let parent = document.createElement('div')\n    let index = 0\n    for(let color of colors) {\n        let div = document.createElement('div')\n        div.style.background = color\n        div.style.width = '32px'\n        div.style.height = '32px'\n        div.style.display = 'inline-block'\n        div.id = 'color_' + index\n        index++;\n        parent.appendChild(div)\n    }\n    document.body.appendChild(parent)\n\n}\n//drawPalette();\n\nfunction drawCanvas() {\n    if (symbols.length == 0) {\n        document.getElementById('symbol').innerHTML = ''\n        return;\n    }\n    document.getElementById('offset').innerHTML = 'Offset: ' + offset.toString(16)\n    // TODO color by symbol or by file\n\n    let current_color = colors[0]\n    let color_index = 0\n    let canvas = document.getElementById('pixels')\n    var ctx = canvas.getContext('2d');\n\n\n    let last_used_addr = symbols[symbols.length-1].addr\n    canvasHeight = (last_used_addr - 0x8000000) / 1024 + 1\n    canvas.height = canvasHeight\n\n    var canvasData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n\n    let next_symbol = 0\n    while (next_symbol < symbols.length && symbols[next_symbol].addr < offset) { // TODO handle EOF\n        next_symbol++;\n    }\n\n    if (next_symbol == symbols.length) {\n        ctx.clearRect(0,0,canvasWidth,canvasHeight);\n        console.error('End of usable symbols')\n        return\n    }\n\n    let colorByFile = false;\n    let lastFile = symbols[0].file;\n    let lastFolder = ''\n\n\n    for (let i = 0; i < canvasWidth*canvasHeight; i++) {\n        if (next_symbol < symbols.length && offset + i >= symbols[next_symbol].addr) {\n\n            switch (mode) {\n                case 0: // symbol\n                    color_index = (color_index + 1) % colors.length\n                    current_color = colors[color_index]\n                    break;\n                case 1: // file\n                    if (lastFile != symbols[next_symbol].file) {\n                        color_index = (color_index + 1) % colors.length\n                        current_color = colors[color_index]\n                        lastFile = symbols[next_symbol].file\n                    }\n                    break;\n                case 2: // folder\n                    if (lastFile != symbols[next_symbol].file) {\n                        lastFile = symbols[next_symbol].file\n                        let folder = lastFile.substring(0,lastFile.lastIndexOf('/'))\n                        if (folder != lastFolder) {\n                            color_index = (color_index + 1) % colors.length\n                            current_color = colors[color_index]\n                            lastFolder = folder\n                        }\n                    }\n                    break;\n                case 3: // type\n                    if (lastFile != symbols[next_symbol].file) {\n                        lastFile = symbols[next_symbol].file\n                        let found = false\n                        for (let key of Object.keys(typeRegexes)) {\n                            //let regex = new RegExp(key)\n                            if (lastFile.match(key)) {\n                                found = true\n                                current_color = colors[typeRegexes[key]]\n                                break\n                            }\n                        }\n                        if (!found) {\n                            current_color = '#ff00ff'\n                        }\n                    }\n                    break;\n            }\n            next_symbol++;\n            if (next_symbol == symbols.length) {\n                current_color = '#000000'\n            }\n        }\n        let rgb = current_color\n        canvasData.data[i*4 + 0] = rgb.r;\n        canvasData.data[i*4 + 1] = rgb.g;\n        canvasData.data[i*4 + 2] = rgb.b;\n        canvasData.data[i*4 + 3] = 255;\n    }\n    ctx.putImageData(canvasData, 0, 0);\n    console.log((offset + canvasWidth*canvasHeight).toString(16))\n    /*\n\n    for (let i = 0; i < 1024*1024; i++) {\n    //for (let i = 0x8000000; i < last_used_addr; i++) {\n        let pixel = document.createElement('div');\n        pixel.className = 'pixel';\n        pixel.style.background = colors[current_color]\n        current_color = (current_color + 1) % colors.length\n        parent.appendChild(pixel);\n    }*/\n    document.getElementById('symbol').innerHTML = 'Done'\n    hoverOverSymbols = true;\n}\n//console.log('loaded')\n\nfunction changeOffset(diff) {\n    offset += diff\n    drawCanvas(offset, symbols)\n}\n\nlet hoverOverSymbols = false;\n\nfunction mouseMove(event) {\n    if (!hoverOverSymbols) {\n        return;\n    }\n    let rect = event.target.getBoundingClientRect();\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n    let addr = offset + x + y * canvasWidth;\n    let next_symbol = 0\n    while (next_symbol < symbols.length && symbols[next_symbol].addr < addr) { // TODO handle EOF\n        next_symbol++;\n    }\n    if (next_symbol == symbols.length) {\n        document.getElementById('symbol').innerHTML = 'No symbol'\n        return\n    }\n    let symbol = symbols[next_symbol-1]\n    document.getElementById('symbol').innerHTML = '0x'+addr.toString(16) + ' ' + symbol.name + ' ' + symbol.file + ' (+'+(addr-symbol.addr)+'|' + symbol.size + ')'\n}\n\nfunction toggleChanging() {\n    hoverOverSymbols = !hoverOverSymbols;\n}\n\nfunction changeMode(newMode) {\n    document.getElementById('mode'+mode).classList.remove('active')\n    mode = newMode;\n    document.getElementById('mode'+mode).classList.add('active')\n    if (symbols.length > 0) {\n        redrawCanvas();\n    }\n}\n\n// document.getElementById('next').onclick = () => changeOffset(canvasWidth*canvasHeight)\n// document.getElementById('prev').onclick = () => changeOffset(-canvasWidth*canvasHeight)\ndocument.getElementById('mode0').onclick = () => changeMode(0)\ndocument.getElementById('mode1').onclick = () => changeMode(1)\ndocument.getElementById('mode2').onclick = () => changeMode(2)\ndocument.getElementById('mode3').onclick = () => changeMode(3)\ndocument.getElementById('pixels').onmousemove = mouseMove;\ndocument.getElementById('pixels').onclick = toggleChanging;"],"names":["$fd20e1b766853d4e$var$reader","FileReader","onload","event","data","lines","split","index","line","startsWith","console","log","current_file","$fd20e1b766853d4e$var$symbols","length","includes","arr","addr","parseInt","size","push","name","file","trim","$fd20e1b766853d4e$var$redrawCanvas","$fd20e1b766853d4e$var$mapLoaded","target","result","$fd20e1b766853d4e$var$file","document","getElementById","onchange","files","innerHTML","readAsText","$fd20e1b766853d4e$var$offset","$fd20e1b766853d4e$var$canvasHeight","$fd20e1b766853d4e$var$mode","$fd20e1b766853d4e$var$hoverOverSymbols","setTimeout","$fd20e1b766853d4e$var$drawCanvas","$fd20e1b766853d4e$var$typeRegexes","$fd20e1b766853d4e$var$colors","i","hex","exec","r","g","b","toString","current_color","color_index","canvas","ctx","getContext","last_used_addr","height","canvasData","getImageData","next_symbol","clearRect","error","lastFile","lastFolder","i1","folder","substring","lastIndexOf","found","key","Object","keys","match","rgb","putImageData","$fd20e1b766853d4e$var$changeMode","newMode","classList","remove","add","onclick","onmousemove","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","symbol"],"version":3,"file":"index.4953117d.js.map"}