{"mappings":"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","sources":["src/map/main.js"],"sourcesContent":["\nvar reader = new FileReader();\nreader.onload = function (event) {\n    var bytes = event.target.result;\n    mapLoaded(bytes)\n};\n\nvar file = document.getElementById('file');\nfile.onchange = function (event) {\n    if (file.files.length > 0) {\n        document.getElementById('symbol').innerHTML = 'Loading map...'\n        reader.readAsText(file.files[0]);\n    }\n};\n\n\nfunction mapLoaded(data) {\n    let lines = data.split('\\n');\n\n    let index = 0\n    let line = lines[index]\n    while (!line.startsWith('rom')) {\n        index += 1\n        line = lines[index]\n    }\n    index += 1\n    line = lines[index]\n    while (!line.startsWith('rom')) {\n        index += 1\n        line = lines[index]\n    }\n    console.log(line)\n    index += 1\n    line = lines[index]\n    // Parse declarations\n    let current_file = 'UNKNOWN'\n\n    symbols = []\n    while (index < lines.length) {\n        if (line.includes('debug_aranges')) {\n            // Break at the start of potentiall debug info if built with -g\n            break;\n        } else if (line.startsWith(' .')) {\n            // ignore this definition of filename\n        } else if(line.startsWith('  ')) {\n            let arr = line.split(/\\W+/)\n            //console.log(arr)\n            if (arr.length == 3 && arr[2] != '') { // it is actually a symbol\n                //console.log(parseInt(arr[1],16), arr[2])\n                let addr = parseInt(arr[1], 16)\n                if (symbols.length > 0) {\n                    symbols[symbols.length-1].size = addr - symbols[symbols.length-1].addr\n                }\n                symbols.push(\n                    {\n                        addr: addr,\n                        name: arr[2],\n                        file: current_file,\n                        size: 0\n                    }\n                )\n            }\n        } else if (!line.startsWith(' *')) {\n            // this defines the name\n            current_file = line.split('(')[0].trim()\n            //console.log(current_file)\n        }\n        index += 1\n        line = lines[index]\n    }\n    console.log(symbols)\n\n    redrawCanvas();\n\n}\n\nlet offset = 0x8000000\nlet symbols = []\n\nlet canvasWidth = 1024, canvasHeight = 1024;\nlet mode = 3;\n\nfunction redrawCanvas() {\n    hoverOverSymbols = false\n    document.getElementById('symbol').innerHTML = 'Painting map...'\n    setTimeout(() => {\n        drawCanvas();\n    }, 10);\n}\n\nlet typeRegexes = {\n    // audio\n    '^data/sound/.*': 24,\n    // graphics\n    'data/gfx/sprite_gfx.o': 5, // TODO not correctly split up into sprites yet\n    '^data/gfx/.*': 6,\n    //'data/data_08132B30.o': 7, // TODO maybe not everything in this file is graphics/maps\n    '^data/animations/.*': 6,\n\n    // maps/tilesets\n    '^data/map/.*': 21,\n\n    // code\n    'data/strings.o': 2,\n    'data/scripts.o': 1,\n    // data\n    '^data/const/.*': 14,\n\n    '^asm/.*': 13,\n    '^data/.*': 16,\n    '^src/.*': 3,\n}\n\nlet legend = {\n    'Code': 3,\n    'Scripts': 1,\n    'Strings': 2,\n\n    'Unknown Data': 16,\n    'Assembly': 13,\n    'Const Data': 14,\n    \n    'Map': 21,\n    'Sprites': 5,\n    'Graphics': 6,\n    'Audio': 24,\n}\n\n//  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n//           x  x  x        x             x  x  x  x           x           x\n// TODO add legend\n\nlet  colors = [\n    '#daf5b1',\n    '#a4ed8b',\n    '#6ce67f',\n    '#3fcc94',\n    '#2bada2',\n    '#22768f',\n    '#183c7a',\n    '#291e58',\n    '#3b0137',\n    '#660653',\n    '#940f5a',\n    '#a6174c',\n    '#cc293f',\n    '#eb3636',\n    '#eb6746',\n    '#f5a762',\n    '#fcd87e',\n    '#fffa9e',\n    '#fffbc7',\n    '#fcfffd',\n    '#d6fcff',\n    '#b7d9f7',\n    '#95a4f0',\n    '#8775eb',\n    '#7e4ae0',\n]\n\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n    } : null;\n}\n\n\nfunction drawPalette() {\n    let parent = document.createElement('div')\n    let index = 0\n    for(let color of colors) {\n        let div = document.createElement('div')\n        div.style.background = color\n        div.style.width = '32px'\n        div.style.height = '32px'\n        div.style.display = 'inline-block'\n        div.id = 'color_' + index\n        div.innerHTML = ''+index\n        div.style.textAlign = 'center'\n        div.style.verticalAlign = 'center'\n        div.style.lineHeight = '32px'\n        div.style.color = '#000'\n        index++;\n        parent.appendChild(div)\n    }\n    document.body.appendChild(parent)\n\n}\n\n//drawPalette();\n\nfunction addLegend() {\n    let parent = document.createElement('div')\n    parent.id = 'legend'\n    for (let key in legend) {\n        let color = document.createElement('div');\n        color.innerHTML = key;\n        color.style.borderColor = colors[legend[key]];\n        parent.appendChild(color);\n    }\n    document.body.appendChild(parent);\n}\naddLegend();\n\nfor (let i = 0; i < colors.length; i++) {\n    colors[i] = hexToRgb(colors[i])\n}\n\nfunction drawCanvas() {\n    if (symbols.length == 0) {\n        document.getElementById('symbol').innerHTML = ''\n        return;\n    }\n    document.getElementById('offset').innerHTML = 'Offset: ' + offset.toString(16)\n    // TODO color by symbol or by file\n\n    let current_color = colors[0]\n    let color_index = 0\n    let canvas = document.getElementById('pixels')\n    var ctx = canvas.getContext('2d');\n\n\n    let last_used_addr = symbols[symbols.length-1].addr\n    canvasHeight = (last_used_addr - 0x8000000) / 1024 + 1\n    canvas.height = canvasHeight\n\n    var canvasData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n\n    let next_symbol = 0\n    while (next_symbol < symbols.length && symbols[next_symbol].addr < offset) { // TODO handle EOF\n        next_symbol++;\n    }\n\n    if (next_symbol == symbols.length) {\n        ctx.clearRect(0,0,canvasWidth,canvasHeight);\n        console.error('End of usable symbols')\n        return\n    }\n\n    let colorByFile = false;\n    let lastFile = symbols[0].file;\n    let lastFolder = ''\n\n\n    for (let i = 0; i < canvasWidth*canvasHeight; i++) {\n        if (next_symbol < symbols.length && offset + i >= symbols[next_symbol].addr) {\n\n            switch (mode) {\n                case 0: // symbol\n                    color_index = (color_index + 1) % colors.length\n                    current_color = colors[color_index]\n                    break;\n                case 1: // file\n                    if (lastFile != symbols[next_symbol].file) {\n                        color_index = (color_index + 1) % colors.length\n                        current_color = colors[color_index]\n                        lastFile = symbols[next_symbol].file\n                    }\n                    break;\n                case 2: // folder\n                    if (lastFile != symbols[next_symbol].file) {\n                        lastFile = symbols[next_symbol].file\n                        let folder = lastFile.substring(0,lastFile.lastIndexOf('/'))\n                        if (folder != lastFolder) {\n                            color_index = (color_index + 1) % colors.length\n                            current_color = colors[color_index]\n                            lastFolder = folder\n                        }\n                    }\n                    break;\n                case 3: // type\n                    if (lastFile != symbols[next_symbol].file) {\n                        lastFile = symbols[next_symbol].file\n                        let found = false\n                        for (let key of Object.keys(typeRegexes)) {\n                            //let regex = new RegExp(key)\n                            if (lastFile.match(key)) {\n                                found = true\n                                current_color = colors[typeRegexes[key]]\n                                break\n                            }\n                        }\n                        if (!found) {\n                            current_color = '#ff00ff'\n                        }\n                    }\n                    break;\n            }\n            next_symbol++;\n            if (next_symbol == symbols.length) {\n                current_color = '#000000'\n            }\n        }\n        let rgb = current_color\n        canvasData.data[i*4 + 0] = rgb.r;\n        canvasData.data[i*4 + 1] = rgb.g;\n        canvasData.data[i*4 + 2] = rgb.b;\n        canvasData.data[i*4 + 3] = 255;\n    }\n    ctx.putImageData(canvasData, 0, 0);\n    console.log((offset + canvasWidth*canvasHeight).toString(16))\n    /*\n\n    for (let i = 0; i < 1024*1024; i++) {\n    //for (let i = 0x8000000; i < last_used_addr; i++) {\n        let pixel = document.createElement('div');\n        pixel.className = 'pixel';\n        pixel.style.background = colors[current_color]\n        current_color = (current_color + 1) % colors.length\n        parent.appendChild(pixel);\n    }*/\n    document.getElementById('symbol').innerHTML = 'Done'\n    hoverOverSymbols = true;\n}\n//console.log('loaded')\n\nfunction changeOffset(diff) {\n    offset += diff\n    drawCanvas(offset, symbols)\n}\n\nlet hoverOverSymbols = false;\n\nfunction mouseMove(event) {\n    if (!hoverOverSymbols) {\n        return;\n    }\n    let rect = event.target.getBoundingClientRect();\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n    let addr = offset + x + y * canvasWidth;\n    let next_symbol = 0\n    while (next_symbol < symbols.length && symbols[next_symbol].addr < addr) { // TODO handle EOF\n        next_symbol++;\n    }\n    if (next_symbol == symbols.length) {\n        document.getElementById('symbol').innerHTML = 'No symbol'\n        return\n    }\n    let symbol = symbols[next_symbol-1]\n    document.getElementById('symbol').innerHTML = '0x'+addr.toString(16) + ' ' + symbol.name + ' ' + symbol.file + ' (+'+(addr-symbol.addr)+'|' + symbol.size + ')'\n}\n\nfunction toggleChanging() {\n    hoverOverSymbols = !hoverOverSymbols;\n}\n\nfunction changeMode(newMode) {\n    document.getElementById('mode'+mode).classList.remove('active')\n    mode = newMode;\n    document.getElementById('mode'+mode).classList.add('active')\n    if (symbols.length > 0) {\n        redrawCanvas();\n    }\n\n    // Only show legend for \"Color type\" mode\n    document.getElementById('legend').style.display = mode == 3 ? 'block' : 'none';\n}\n\n// document.getElementById('next').onclick = () => changeOffset(canvasWidth*canvasHeight)\n// document.getElementById('prev').onclick = () => changeOffset(-canvasWidth*canvasHeight)\ndocument.getElementById('mode0').onclick = () => changeMode(0)\ndocument.getElementById('mode1').onclick = () => changeMode(1)\ndocument.getElementById('mode2').onclick = () => changeMode(2)\ndocument.getElementById('mode3').onclick = () => changeMode(3)\ndocument.getElementById('pixels').onmousemove = mouseMove;\ndocument.getElementById('pixels').onclick = toggleChanging;"],"names":["$fd20e1b766853d4e$var$reader","FileReader","onload","event","data","lines","split","index","line","startsWith","console","log","current_file","$fd20e1b766853d4e$var$symbols","length","includes","arr","addr","parseInt","size","push","name","file","trim","$fd20e1b766853d4e$var$redrawCanvas","$fd20e1b766853d4e$var$mapLoaded","target","result","$fd20e1b766853d4e$var$file","document","getElementById","onchange","files","innerHTML","readAsText","$fd20e1b766853d4e$var$offset","$fd20e1b766853d4e$var$canvasHeight","$fd20e1b766853d4e$var$mode","$fd20e1b766853d4e$var$hoverOverSymbols","setTimeout","$fd20e1b766853d4e$var$drawCanvas","$fd20e1b766853d4e$var$typeRegexes","$fd20e1b766853d4e$var$legend","$fd20e1b766853d4e$var$colors","parent","createElement","id","key","color","style","borderColor","appendChild","body","$fd20e1b766853d4e$var$addLegend","i","hex","exec","r","g","b","toString","current_color","color_index","canvas","ctx","getContext","last_used_addr","height","canvasData","getImageData","next_symbol","clearRect","error","lastFile","lastFolder","i1","folder","substring","lastIndexOf","found","Object","keys","match","rgb","putImageData","$fd20e1b766853d4e$var$changeMode","newMode","classList","remove","add","display","onclick","onmousemove","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","symbol"],"version":3,"file":"index.232afd0c.js.map"}